#!/bin/bash
################################################################################
#                     Copyright (C) 2017 by Christian Mee√üen                   #
#                                                                              #
#                         This file is part of Scripts                         #
#                                                                              #
#        Scripts is free software: you can redistribute it and/or modify       #
#     it under the terms of the GNU General Public License as published by     #
#           the Free Software Foundation version 3 of the License.             #
#                                                                              #
#      GMTScripts is distributed in the hope that it will be useful, but       #
#          WITHOUT ANY WARRANTY; without even the implied warranty of          #
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU       #
#                   General Public License for more details.                   #
#                                                                              #
#      You should have received a copy of the GNU General Public License       #
#       along with Scripts. If not, see <http://www.gnu.org/licenses/>.        #
################################################################################
set -e
if [ $# -lt 1 ]
then
  echo
  echo "Not enough arguments."
  echo
  echo "Usage: PlotNCDF InputFile [-i][-a][-n][-cpt][-vcpt]"
  echo "       arguments in [] are optional"
  echo
  echo "Optional Arguments:"
  echo "          Type   Default  Explanation"
  echo "    -a    float  155      Azimuth for illumination"
  echo "    -cpt  str    haxby    Name of the color scale to use"
  echo "    -i                    Activate grid illumination"
  echo "    -n    int    15       Number of levels in color scale"
  echo "    -vcpt float float     Min Max of color scale values"
  echo
  echo "Plots a NetCDF file with or without illumination."
  echo
  exit
fi

# Default values
azim=155
cpt='haxby'
illum='False'
n_levels=15
use_custom_cpt='False'

InFile=$1
shift 1

# Go through command line options
while (( "$#" ))
do
    if [ "$1" = "-a" ]
    then
        azim=$2
        shift 2
    elif [ "$1" = "-cpt" ]
    then
        cpt=$2
        shift 2
    elif [ "$1" = "-i" ]
    then
        illum='True'
        shift 1
    elif [ "$1" = "-n" ]
    then
        n_levels=$2
        shift 2
    elif [ "$1" = "-vcpt" ]
    then
        use_custom_cpt='True'
        cpt_vmin=$2
        cpt_vmax=$3
        shift 3
    else
        echo "ERROR! Unknown argument $1"
        echo
        exit
    fi
done

declare -a tmp=(`grdinfo $InFile -C`)
xmin=${tmp[1]}
xmax=${tmp[2]}
ymin=${tmp[3]}
ymax=${tmp[4]}
zmin=${tmp[5]}
zmax=${tmp[6]}
ROI=-R$xmin/$xmax/$ymin/$ymax
dX=`bc <<< "scale=2;$xmax-($xmin)"`
dY=`bc <<< "scale=2;$ymax-($ymin)"`
dZ=`bc <<< "scale=2;$zmax-($zmin)"`
map_width=10
map_height=`bc <<< "scale=2;$dY/$dX*$map_width"`
scale_dX=`bc <<< "scale=2;$map_width/2"`
out_name=$InFile.ps
out_format='png'

if [ "$use_custom_cpt" = "True" ]
then
    makecpt -T${cpt_vmin}/${cpt_vmax}/${n_levels}+ -C${cpt} > colors.cpt
else
    grd2cpt $InFile -C${cpt} -E${n_levels} > colors.cpt
fi

echo "Plot information"
echo "x range [$xmin,$xmax]"
echo "y range [$ymin,$ymax]"
echo "ROI: $ROI"

version=`gmt --version`
tick='--'
if ! [ $version == "5.2"* ] || ! [ $version == "5.1"* ]
then
    tick=''
fi
gmt set "$tick"FONT_ANNOT_PRIMARY=6p \
        "$tick"FONT_ANNOT_SECONDARY=6p \
        "$tick"FONT_LABEL=6p \
        "$tick"FONT_TITLE=8p,Helvetica-Bold \
        "$tick"MAP_ANNOT_OFFSET_PRIMARY=0.1 \
        "$tick"MAP_FRAME_PEN=0.5p \
        "$tick"MAP_TICK_LENGTH_PRIMARY=0.1

if [ "$illum" == "True" ]
then
    grdgradient $InFile -Nt1 -A${azim} -Gillumination.nc
    ill='-Iillumination.nc'
else
    ill=''
fi

grdimage $InFile -JX$map_width/$map_height $ROI $ill -Ccolors.cpt -BNsWe -Baf --MAP_ANNOT_ORTHO -K > $out_name
psscale -D$scale_dX/-0.2/$map_width/0.3h -Ccolors.cpt -Baf+l"Value" -Np -O >> $out_name

case "$out_format" in
bmp )
	ftpe='b';;
eps )
	ftpe='e';;
pdf )
	ftpe='f';;
jpg )
	ftpe='j';;
png )
	ftpe='g';;
* )
	ftpe='g';;
esac

psconvert -A -P -E400 -T$ftpe $out_name

rm gmt.history gmt.conf $out_name colors.cpt
rm *.eps illumination.nc *.bb 2> /dev/null

echo "Done."
echo "Output file: $InFile.$out_format"
