#!/bin/bash
################################################################################
#                     Copyright (C) 2017 by Christian Mee√üen                   #
#                                                                              #
#                         This file is part of Scripts                         #
#                                                                              #
#        Scripts is free software: you can redistribute it and/or modify       #
#     it under the terms of the GNU General Public License as published by     #
#           the Free Software Foundation version 3 of the License.             #
#                                                                              #
#      GMTScripts is distributed in the hope that it will be useful, but       #
#          WITHOUT ANY WARRANTY; without even the implied warranty of          #
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU       #
#                   General Public License for more details.                   #
#                                                                              #
#      You should have received a copy of the GNU General Public License       #
#       along with Scripts. If not, see <http://www.gnu.org/licenses/>.        #
################################################################################
# Plots information in YSE-Files generated by `Rheology`
set -e
if [ $# -lt 1 ]
then
  echo
  echo "Not enough arguments."
  echo
  echo "Usage: PlotYSE InputFile"
  echo "       arguments in [] are optional"
  echo
  echo "Plot the information of a YSE_*.csv file generated with Rheology."
  echo
  exit
fi

InFile=$1
tmpfile="${InFile}_${RANDOM}.tmp"
nHeader=''
verbose='False'
tlegend='Value'
plotmap='FALSE'

echo 'Plotting '$InFile

map_width=5
map_height=10
out_name=${InFile/.csv/.ps}
out_format='png'

version=`gmt --version`
tick='--'
if [[ "$version" == "5.4"* ]]
then
  tick=''
fi
setgmt
gmt set "$tick"FONT_ANNOT_PRIMARY=6p \
        "$tick"FONT_ANNOT_SECONDARY=6p \
        "$tick"FONT_LABEL=6p \
        "$tick"FONT_TITLE=8p,Helvetica-Bold \
        "$tick"MAP_ANNOT_OFFSET_PRIMARY=0.1 \
        "$tick"MAP_FRAME_PEN=0.5p \
        "$tick"MAP_TICK_LENGTH_PRIMARY=0.1

echo "Checking for INTEGRATED_STRENGTH.csv"
if [ -f "./INTEGRATED_STRENGTH.csv" ]
then
  plotmap='TRUE'
  echo "> found!"
  echo "Extracting map information"
  ROI_MINIMAP=`gmt gmtinfo INTEGRATED_STRENGTH.csv -hi1 -i0,1 -I1000`
fi

# Columns
# 0 - X[m]
# 1 - Y[m]
# 2 - Z[m]
# 3 - T[degC]
# 4 - SIGMAB_C[MPa]
# 5 - SIGMAB_E[MPa]
# 6 - SIGMA_D[MPa]
# 7 - DSIGMA_C[MPa]
# 8 - DSIGMA_E[MPa]
echo "Obtaining YSE Information"
declare -a info=(`gmt gmtinfo $InFile -hi1 -i0,1,2s0.001,3,4,5,6,7,8, -C`)
zmin=${info[4]}
zmax=${info[5]}
Tmin=${info[6]}
Tmax=${info[7]}
SIGMA_C_min=${info[8]}
SIMGA_C_max=${info[9]}
SIGMA_E_min=${info[10]}
SIGMA_E_max=${info[11]}
DSIGMA_C_min=${info[14]}
DSIGMA_C_max=${info[15]}
DSIGMA_E_min=${info[16]}
DSIGMA_E_max=${info[17]}

RJ="-R${DSIGMA_C_min}/${DSIGMA_E_max}/${zmin}/${zmax} -JX${map_width}/${map_height}"
LW=0.25
LW_T=0.5

# Create a temporary file with differential stresses
gmt gmtselect $InFile -hi1 -i7,2s0.001 > ${tmpfile}
# append the inverse of DSIGMA_E to achieve a closed polygon
gmt gmtselect $InFile -hi1 -i8,2s0.001 | tac >> ${tmpfile}
gmt psxy ${tmpfile} ${RJ} -W${LW}p,black -Gred -K > $out_name
echo "0 ${zmax}" > ${tmpfile}
echo "0 ${zmin}" >> ${tmpfile}
gmt psxy ${tmpfile} ${RJ} -W${LW}p,black -O -K >> $out_name
gmt psbasemap ${RJ} -BWSNe -Baf -Bx+l'Diff. stress / MPa' -By+l'Depth / km' -O -K >> $out_name
# Plot temperature
RJ="-R${Tmin}/${Tmax}/${zmin}/${zmax} -JX${map_width}/${map_height}"
gmt psxy ${InFile} -hi1 -i3,2s0.001 ${RJ} -W${LW_T}p,black -X$map_width -O -K >> $out_name
if [ "${plotmap}" == "TRUE" ]
then
  gmt psbasemap ${RJ} -BwNSe -Baf -Bx+l'Temperature / \260C' -O -K >> $out_name
  col=4
  T=`gmt gmtinfo INTEGRATED_STRENGTH.csv -hi1 -i${col} -T0.1`
  declare -a tmp=(`gmt gmtinfo INTEGRATED_STRENGTH.csv -hi1 -i0,1 -C`)
  dx=`bc -l <<< "${tmp[1]}-(${tmp[0]})"`
  dy=`bc -l <<< "${tmp[3]}-(${tmp[2]})"`
  map_width2=`bc -l <<< "$map_height*${dx}/${dy}"`
  gmt makecpt ${T} -Ccopper > colors.cpt
  gmt pscontour INTEGRATED_STRENGTH.csv -i0,1,$col -hi1 -I -Ccolors.cpt \
  -JX$map_width2/$map_height ${ROI_MINIMAP} -X$map_width -O -K >> $out_name
  gmt psbasemap -R -J -BwSNE+t'INT_STRENGTH_LITHO' -Baf -O -K >> $out_name
  gmt gmtselect ${InFile} -hi1 -i0,1 | head -n 1 | gmt psxy -R -J -Sc0.25 -Gred -W0.25p,black -N -O -K >> $out_name
  gmt psscale -R -J -Ccolors.cpt -DjBC+w${map_width2}/0.3+h+jTC+o0/0.5 -Baf+l'Pa m' -O >> $out_name
else
  gmt psbasemap ${RJ} -BwNSe -Baf -Bx+l'Temperature / \260C' -O >> $out_name
fi


case "$out_format" in
bmp )
	ftpe='b';;
eps )
	ftpe='e';;
pdf )
	ftpe='f';;
jpg )
	ftpe='j';;
png )
	ftpe='g';;
* )
	ftpe='g';;
esac

echo 'psconvert'
gmt psconvert -A -P -E400 -T$ftpe $out_name

rm ${out_name} ${tmpfile}
rm gmt.history
rm gmt.conf
rm *.eps *.bb 2> /dev/null

echo "Output file: $InFile.$out_format"
