#!/bin/bash
################################################################################
#                     Copyright (C) 2017 by Christian Mee√üen                   #
#                                                                              #
#                         This file is part of Scripts                         #
#                                                                              #
#        Scripts is free software: you can redistribute it and/or modify       #
#     it under the terms of the GNU General Public License as published by     #
#           the Free Software Foundation version 3 of the License.             #
#                                                                              #
#      GMTScripts is distributed in the hope that it will be useful, but       #
#          WITHOUT ANY WARRANTY; without even the implied warranty of          #
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU       #
#                   General Public License for more details.                   #
#                                                                              #
#      You should have received a copy of the GNU General Public License       #
#       along with Scripts. If not, see <http://www.gnu.org/licenses/>.        #
################################################################################

set -e
setgmt
gmttest

if [ $# -lt 1 ]
then
  echo
  echo "Not enough arguments."
  echo
  echo "Usage: PlotNCDF InputFile [-i]"
  echo "       arguments in [] are optional"
  echo
  echo "-i    - Activate grid illumination/"
  echo
  echo "Plots a NetCDF file with or without illumination."
  echo
  exit
elif [ $# -eq 1 ]
then
  InFile=$1
  illum='False'
elif [ $# -eq 2 ]
then
  InFile=$1
  illum='True'
fi

declare -a tmp=(`grdinfo $InFile -C`)
xmin=${tmp[1]}
xmax=${tmp[2]}
ymin=${tmp[3]}
ymax=${tmp[4]}
zmin=${tmp[5]}
zmax=${tmp[6]}
ROI=-R$xmin/$xmax/$ymin/$ymax/$zmin/$zmax
dX=`bc -l <<< "$xmax-($xmin)"`
dY=`bc -l <<< "$ymax-($ymin)"`
dZ=`bc -l <<< "$zmax-($zmin)"`
map_width=10
map_height=`bc <<< "scale=2;$dY/$dX*$map_width"`
scale_dX=`bc <<< "scale=2;$map_width/2"`
out_name=$InFile.ps
out_format='png'

grd2cpt $InFile -Chaxby -E15 > colors.cpt

echo "Plot information"
echo "x range [$xmin,$xmax]"
echo "y range [$ymin,$ymax]"
echo "ROI: $ROI"

if [ "$illum" == "True" ]
then
    gmt grdgradient $InFile -Nt1 -A60 -Qt4 -E400 -Gillumination.nc
    ill='-Iillumination.nc'
else
    ill=''
fi

gmt grdgradient $InFile -A20 -Nt0.75 -Gillumination.nc
ill='-Iillumination.nc'

gmt grdview $InFile -JX$map_width/$map_height $ROI -Jz0.00005c $ill -p160/30 -Qs -Ccolors.cpt -BWSNE+b -Baf -K > $out_name
# grdimage $InFile -JX$map_width/$map_height $ROI $ill -Ccolors.cpt -BNsWe -Baf --MAP_ANNOT_ORTHO -K > $out_name
# psscale -D$scale_dX/-0.2/$map_width/0.3h -Ccolors.cpt -Baf+l"Value" -Np -O >> $out_name
gmt psscale -DJBL+jTL+w$map_width+h -R -JX$map_width/$map_height -Jz0.00005c -Baf -Ccolors.cpt -Np -O >> $out_name

case "$out_format" in
bmp )
	ftpe='b';;
eps )
	ftpe='e';;
pdf )
	ftpe='f';;
jpg )
	ftpe='j';;
png )
	ftpe='g';;
* )
	ftpe='g';;
esac

gmt ps2raster -A -P -E400 -T$ftpe $out_name

rm gmt.history gmt.conf $out_name colors.cpt
rm *.eps illumination.nc *.bb 2> /dev/null

echo "Done."
echo "Output file: $InFile.$out_format"
